// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Story {
  id                   String      @id @default(cuid())
  name                 String
  country              String
  city                 String
  companion            String
  budget               String
  duration             String
  relationShipDynamics String?
  adventuresStyle      String?
  tone                 String?
  conflict             String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  steps                StoryStep[]

  // ðŸ‘‡ relation to User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([name])
}

model StoryStep {
  id        String  @id @default(cuid())
  storyId   String
  content   String
  optionA   String?
  optionB   String?
  stepOrder Int
  isEnd     Boolean @default(false)

  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  credits       Int       @default(20)
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  stories       Story[] // ðŸ‘ˆ one user can have many stories

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
